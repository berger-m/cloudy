/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.0/userguide/java_library_plugin.html
 */

// common.gradle v6
// common.gradle is for tasks and configurations that are meant to be shared across multiple projects

import java.nio.file.Paths;

if ( project.hasProperty('isJava') )
{
	buildscript {
		repositories {
		    // Use jcenter for resolving dependencies.
		    // You can declare any Maven/Ivy/file repository here.
		    // Troubleshooting: https://repo.jfrog.org/artifactory/libs-release-bintray
		    jcenter()
		}
		
	    dependencies {        
	        // Development tools
	        classpath 'org.jboss.tattletale:tattletale:1.1.2.Final'        
	    }
	}
	
	repositories {
	    // Use jcenter for resolving dependencies.
	    // You can declare any Maven/Ivy/file repository here.
	    // Troubleshooting: https://repo.jfrog.org/artifactory/libs-release-bintray
	    jcenter()
	}
	
	java {
	    sourceCompatibility = JavaVersion.VERSION_1_8
	    targetCompatibility = JavaVersion.VERSION_1_8
	    withJavadocJar()
    	withSourcesJar()
	}

	if ( project.hasProperty('isEclipseIde') )
	{
		eclipse {
			project {
				natures = ['org.eclipse.jdt.core.javanature', 'org.eclipse.buildship.core.gradleprojectnature']
			}
		}
	}
	
	dependencies {
		compileOnly 'com.github.spotbugs:spotbugs-annotations:4.2.0'
	}	
	
	task cleanTestDb {
		group = 'dev-tools'
	    description = 'Remove test database directory'
		delete file(Paths.get("${projectDir}", 'testdb'))	
	}
	
	test {
		useJUnitPlatform()
		testLogging {
			events "passed", "skipped", "failed"
		}

		// For use in IDE -Dlog4j.configurationFile=src/test/resources/log4j/log4j2.xml
		jvmArgs = [
			"-Dapp.name=defaultSpringApp",
			"-Ddir.log=${Paths.get('build', 'log', 'test', 'defaultSpringApp')}",
			"-Dlog4j.configurationFile=${Paths.get('src', 'test', 'resources', 'log4j', 'log4j2.xml')}",
			"-Djava.util.logging.manager=org.apache.logging.log4j.jul.LogManager"]
		finalizedBy jacocoTestReport
	}
	
	jacocoTestReport {
	    dependsOn test // tests are required to run before generating the report
	}
	
	checkstyle {
		ignoreFailures = true
		showViolations = false
	}

	spotbugsMain {
		group = 'build'
	    description = 'Performs static code analysis'
	    
	    reports {
	        html {
	            enabled = true
	            destination = file(Paths.get("${buildDir}", 'reports', 'spotbugs', 'main', 'spotbugs.html'))
	            stylesheet = 'fancy-hist.xsl'
	        }
	    }
	}
	
	// Disabled because the static code analysis of the automated tests is slow & provides very little benefit (Devs can manually enable when desired)
	spotbugsTest {
		enabled = false
		group = 'build'
	    description = 'Performs static code analysis on test code'
	}
	
	// https://docs.jboss.org/tattletale/userguide/1.2/en-US/html_single/
	task tattletale(type: JavaExec, dependsOn: [configurations.runtimeClasspath, jar]) {
		group = 'dev-tools'
	    description = 'Runs RedHat\'s tattletale tool to inspect the jar files & dependencies'
	    main = "org.jboss.tattletale.Main"
		def outputDir = file(Paths.get("${buildDir}", 'reports', 'tattletale'))
		def tempDir = file(Paths.get("${buildDir}", 'temp-tattletale'))
		doFirst {
			delete outputDir
			outputDir.mkdirs()
			tempDir.mkdirs()
			copy { 
				from jar.archivePath, project.configurations.runtimeClasspath
				into tempDir
			}
		}		
		classpath = buildscript.configurations.classpath
		args tempDir
		args outputDir
		
		doLast {
			// Cleanup
			delete tempDir
		}
	}
}