/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.3/userguide/java_library_plugin.html
 */

buildscript {
	repositories {
	    // Use jcenter for resolving dependencies.
	    // You can declare any Maven/Ivy/file repository here.
	    // Troubleshooting: https://repo.jfrog.org/artifactory/libs-release-bintray
	    jcenter()
	    //mavenCentral()
	}

    dependencies {
    	// add spotbugs Gradle Plugin
    	// https://plugins.gradle.org/plugin/com.github.spotbugs
        // https://github.com/spotbugs/spotbugs-gradle-plugin
        classpath 'gradle.plugin.com.github.spotbugs.snom:spotbugs-gradle-plugin:4.6.0'
        classpath 'org.springframework.boot:spring-boot-gradle-plugin:2.4.3'
        classpath 'io.spring.gradle:dependency-management-plugin:1.0.11.RELEASE'
    }
}

plugins {
    // Apply the java-library plugin to add support for Java Library
    id 'java'
    id 'java-library' // https://docs.gradle.org/6.0/userguide/java_library_plugin.html
    id 'checkstyle'
    id 'eclipse' // https://docs.gradle.org/6.0/userguide/eclipse_plugin.html
    id 'jacoco'
}

// Prevent plugins loaded from the buildscript classpath from being re-loaded in multiple projects
if ( project.getPlugins().hasPlugin('com.github.spotbugs') ) {
    // do nothing
} else {
	apply plugin: 'com.github.spotbugs'
}

if ( project.getPlugins().hasPlugin('org.springframework.boot') ) {
    // do nothing
} else {
	apply plugin: 'org.springframework.boot'
}

if ( project.getPlugins().hasPlugin('io.spring.gradle') ) {
    // do nothing
} else {
	apply plugin: 'io.spring.dependency-management'
}

import java.nio.file.Paths;

apply from: 'common.gradle'

configurations {    
    // Dependencies specifically for deployment in Servlets locally
    localServlet {
        extendsFrom api, implementation, runtimeOnly
        transitive = true
    }
    
    test {
    	extendsFrom localServlet
    }
}

sourceSets {

	localServlet {
		java {
		    compileClasspath += sourceSets.main.output + sourceSets.main.compileClasspath
		    runtimeClasspath += sourceSets.main.output + sourceSets.main.runtimeClasspath
	    }
	}
	
	test {
		// Without this automated tests executed on the commandline fail with error:
		// java.lang.IllegalStateException: Unable to find a @SpringBootConfiguration, you need to use @ContextConfiguration or @SpringBootTest(classes=...) with your test
    	runtimeClasspath += sourceSets.main.output + sourceSets.localServlet.runtimeClasspath
    }
}

task localServletJar(type: Jar) {
	archiveBaseName = 'localServlet'
    from sourceSets.localServlet.output 
}
build.dependsOn localServletJar

// The last call to test.useJUnitPlatform overrides all previous
test.useJUnitPlatform { 
	// Tag values come from ds-rdb-sampleHR/com.jrest.core.test.TestTags 	
	excludeTags (
		'execManual' // only fully automated tests are eligible for execution
		//,'typePerformance' // Disable in IDE for dev purposes; run in automated nightly build 
		) 
}

configurations {
    all {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
    }
}

dependencies {
	api (project(path: ':ds-rdb-cloudy'))
	
	// CSV bindings
	implementation 'javax.xml.bind:jaxb-api'	
	implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-csv'
	
	// Spring + Thymeleaf	
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation ('org.springframework.boot:spring-boot-starter-web')
	implementation 'org.springframework.boot:spring-boot-starter-log4j2'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	
	// End to end tests
	testImplementation 'org.seleniumhq.selenium:selenium-api'
	testImplementation 'org.seleniumhq.selenium:selenium-java'
	testImplementation 'org.seleniumhq.selenium:htmlunit-driver'
	
	localServletRuntimeOnly 'com.h2database:h2'
}

bootRun {
	classpath = sourceSets.localServlet.runtimeClasspath
	systemProperty 'app.name', 'defaultSpringApp'
	systemProperty 'dir.log', "${Paths.get('build', 'log', 'defaultSpringApp')}"
	systemProperty 'log4j.configurationFile', "${Paths.get('src', 'main', 'resources', 'log4j', 'log4j2.xml')}"
	systemProperty 'java.util.logging.manager', 'org.apache.logging.log4j.jul.LogManager'
}
